{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","className","style","maxWidth","margin","src","alt","id","value","type","multiple","accept","onChange","e","files","results","name","content","processFiles","mode","document","getElementById","Array","from","forEach","f","push","text","then","str","json","JSON","parse","lbft","context","story","fragments","i","length","data","lbs","lorebook","entries","mname","metadata","title","input","Promise","all","downloadZip","blob","FileSaver","saveAs","Blob","target","textAlign","display","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0QAgGeA,MA1Ff,WAmDE,OAEE,sBAAKC,UAAU,MAAMC,MAAO,CAAEC,SAAU,QAASC,OAAQ,UAAzD,UACI,mCACJ,6DADI,uEAEgE,uBACpE,qBAAKC,IAAI,wFAAwFC,IAAI,oCACrG,uBAJI,OAIK,qBAAKD,IAAI,6FAA6FC,IAAI,QACnH,uBALI,UADJ,YAQa,yBAAQC,GAAG,OAAX,UACb,wBAAQC,MAAM,QAAd,mBACA,wBAAQA,MAAM,WAAd,yBAVA,gBAWoB,uBACtB,uBACI,uBACED,GAAG,QACHE,KAAK,OACLC,UAAU,EACVC,OAAO,SACPC,SAAU,SAACC,GAAD,OAtEK,SAACC,GACpB,IAAMC,EAA6C,GAC/CC,EAAO,GACPC,EAAU,GACRC,EAAmC,GACnCC,EAAOC,SAASC,eAAe,QACrCC,MAAMC,KAAKT,GAAOU,SAAQ,SAACC,GACzBP,EAAaQ,KACXD,EAAEE,OAAOC,MAAK,SAACD,GACb,IAAIE,EAAM,GACNC,EAAOC,KAAKC,MAAML,GAClBM,EAAO,GACX,GAAmB,UAAfd,EAAKX,MAEP,IADA,IAAI0B,EAAUJ,EAAKb,QAAQkB,MAAMC,UACxBC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAClCR,GAAOK,EAAQG,GAAGE,SAGjB,CACHN,EAAO,YACP,IAAIO,EAAMV,EAAKb,QAAQwB,SAASC,QAChC,IAASL,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAC1BA,GAAK,IACPR,GAAO,WACTA,GAAOW,EAAIH,GAAGV,KAIlBV,EAAUY,EACV,IAAIc,EAAQb,EAAKc,SAASC,MAAQZ,EAAO,OAC5B,KAATjB,IACFA,EAAO2B,GACT5B,EAAQW,KAAK,CAAEV,KAAM2B,EAAOG,MAAOjB,WAIzCkB,QAAQC,IAAI9B,GAAcU,MAAK,WAC7B,GAAGb,EAAQuB,QAAU,EACnBW,YAAYlC,GACTmC,OACAtB,MAAK,SAACsB,GAAUC,IAAUC,OAAOF,EAAMlC,EAAK,eAC5C,CACH,IAAIkC,EAAO,IAAIG,KAAK,CAACpC,GAAU,CAACR,KAAM,6BACtC0C,IAAUC,OAAOF,EAAMlC,GAEXI,SAASC,eAAe,SAChCb,MAAQ,MAwBKU,CAAaL,EAAEyC,OAAOxC,UAG/C,sBAAKZ,MAAO,CAAEqD,UAAW,OAAQC,QAAS,SAA1C,UAEQ,mBAAGC,KAAK,yCAAR,uBAFR,iBAGQ,uBAHR,UAGgB,mBAAGA,KAAK,kCAAR,qBACR,uBAJR,UAIgB,mBAAGA,KAAK,oCAAR,4BACR,uBALR,UAKgB,mBAAGA,KAAK,4CAAR,6BACR,uBACA,uBACR,mBAAGA,KAAK,wCAAwCH,OAAO,SAASI,IAAI,aAApE,+CC1EeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjD,SAASC,eAAe,SAM1BsC,M","file":"static/js/main.6f173e3f.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport { downloadZip } from \"client-zip\";\r\nimport FileSaver from \"file-saver\";\r\nexport {}\r\n//npm start\r\n//npm run deploy\r\nfunction App() {\r\n  const processFiles = (files: FileList) => {\r\n    const results: { name: string; input: string }[] = [];\r\n    let name = ''\r\n    let content = ''\r\n    const processFiles: Promise<unknown>[] = [];\r\n    const mode = document.getElementById(\"mode\") as HTMLInputElement;\r\n    Array.from(files).forEach((f) => {\r\n      processFiles.push(\r\n        f.text().then((text) => {\r\n          let str = '';\r\n          let json = JSON.parse(text);\r\n          let lbft = '';\r\n          if (mode.value === \"story\") {\r\n            let context = json.content.story.fragments; \r\n            for (var i = 0; i < context.length; i++)\r\n              str += context[i].data;\r\n              //str = json.content.story.fragments.map((c: { data: any; }) => c.data).join('');\r\n          } \r\n          else {\r\n            lbft = ' lorebook';\r\n            let lbs = json.content.lorebook.entries; \r\n            for (var i = 0; i < lbs.length; i++) {\r\n              if (i >= 1)\r\n                str += '\\n***\\n';\r\n              str += lbs[i].text;\r\n            }\r\n            //str = json.content.lorebook.entries.map((e: { text: any; }) => e.text).join('\\n***\\n');\r\n          }\r\n          content = str;\r\n          let mname = json.metadata.title + lbft + '.txt';\r\n          if (name === '')\r\n            name = mname;\r\n          results.push({ name: mname, input: str });\r\n        })\r\n      );\r\n    });\r\n    Promise.all(processFiles).then(() => {//\r\n      if(results.length >= 2)\r\n        downloadZip(results)\r\n          .blob()\r\n          .then((blob) => {FileSaver.saveAs(blob, name+'.zip');})\r\n      else {\r\n        var blob = new Blob([content], {type: \"text/plain;charset=utf-8\"});\r\n        FileSaver.saveAs(blob, name)\r\n      }\r\n      const reset = document.getElementById(\"reset\") as HTMLInputElement;\r\n      reset.value = '';\r\n    }\r\n    );\r\n  };\r\n  return (\r\n    \r\n    <div className=\"App\" style={{ maxWidth: \"800px\", margin: \"0 auto\" }}>\r\n        <header>\r\n    <h1>NovelAI plaintext converter</h1>\r\n    Convert any NAI story to a text file with a single click of a button<br />\r\n    <img src=\"https://cdn.discordapp.com/attachments/356304198398115841/968465366584016916/here.png\" alt=\"download story from novelai img\"/>\r\n    <br/>    <img src=\"https://media.discordapp.net/attachments/356304198398115841/968728524682838037/unknown.png\" alt=\"nvm\"/>\r\n    <br/> nvm\r\n  </header>\r\n        Download <select id=\"mode\">\r\n    <option value=\"story\">story</option>\r\n    <option value=\"lorebook\">lorebook</option>\r\n  </select> as plaintext<br />\r\n  <br />\r\n      <input\r\n        id=\"reset\"\r\n        type=\"file\"\r\n        multiple={true}\r\n        accept=\".story\"\r\n        onChange={(e) => processFiles(e.target.files!)}\r\n      />\r\n\r\n<pre style={{ textAlign: \"left\", display: \"block\" }}>\r\n\r\n        <a href=\"https://www.reddit.com/user/pumegaming\" >By pume_!</a> check out my:\r\n        <br />• <a href=\"https://rentry.org/pume-modules\" >modules</a>\r\n        <br />• <a href=\"https://rentry.org/lorebook-guide\" >lorebook guide</a>\r\n        <br />• <a href=\"https://pume-p.github.io/ao3-datasetting/\" >ao3 datasetting</a>\r\n        <br />\r\n        <br />\r\n<a href=\"https://www.reddit.com/user/Zermelane\" target=\"_blank\" rel=\"noreferrer\">Original code by Zermelane</a>\r\n\r\n      </pre>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}